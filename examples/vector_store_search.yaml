---
# Example that uses Cohere embeddings and OpenSearch for vector store 
# This also shows how to use AWS credentials and AWS4Auth for OpenSearch
# which involves using 'invoke' to create the required auth objects
log:
  stdout_log_level: DEBUG
  log_file_level: DEBUG
  log_file: solace_ai_connector.log

shared_config:
  - broker_config: &broker_connection
      broker_connection_share: ${SOLACE_BROKER_URL}
      broker_type: solace
      broker_url: ${SOLACE_BROKER_URL}
      broker_username: ${SOLACE_BROKER_USERNAME}
      broker_password: ${SOLACE_BROKER_PASSWORD}
      broker_vpn: ${SOLACE_BROKER_VPN}

  # Get AWS credentials object
  - aws_credentials: &aws_credentials
      invoke:
        object:
          invoke:
            module: boto3
            function: Session
        function: get_credentials

  # Get AWS4Auth object
  - aws_4_auth_aoss: &aws_4_auth_aoss
      invoke:
        module: requests_aws4auth
        function: AWS4Auth
        params:
          positional:
            - invoke:
                object: *aws_credentials
                attribute: access_key
            - invoke:
                object: *aws_credentials
                attribute: secret_key
            - ${AWS_BEDROCK_COHERE_EMBED_REGION}
            # Service name
            - aoss
          keyword:
            session_token:
              invoke:
                object: *aws_credentials
                attribute: token

# List of flows
flows:
  - name: test_flow
    trace_level: DEBUG
    components:

      # Input from a Solace broker
      - component_name: stdin
        component_module: stdin_input
        component_config:

      - component_name: opensearch_cohere_embed
        component_module: langchain_vector_store_embedding_search
        component_config:
          vector_store_component_path: langchain_community.vectorstores
          vector_store_component_name: OpenSearchVectorSearch
          vector_store_component_config:
            index_name: ${AWS_OPENSEARCH_JIRA_INDEX_NAME}
            opensearch_url: ${AWS_OPENSEARCH_JIRA_ENDPOINT}
            connection_class: 
              invoke:
                module: opensearchpy
                attribute: RequestsHttpConnection
            http_auth: *aws_4_auth_aoss
            timeout: 300
          vector_store_index_name: solace-index-3
          embedding_component_path: langchain_community.embeddings
          embedding_component_name: BedrockEmbeddings
          embedding_component_config:
            model_id: ${AWS_BEDROCK_COHERE_EMBED_MODEL_ID}
            region_name: ${AWS_BEDROCK_COHERE_EMBED_REGION}
            credentials_profile_name: default
          max_results: 7
        component_input:
          source_expression: input.payload


      - component_name: stdout
        component_module: stdout_output
